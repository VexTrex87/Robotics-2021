{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\nleft_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nleft_motor_b = Motor(Ports.PORT2, GearSetting.RATIO_18_1, False)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b)\nright_motor_a = Motor(Ports.PORT9, GearSetting.RATIO_18_1, True)\nright_motor_b = Motor(Ports.PORT10, GearSetting.RATIO_18_1, True)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b)\ndrivetrain_inertial = Inertial(Ports.PORT4)\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, drivetrain_inertial, 319.19, 320, 40, MM, 1)\narms_motor_a = Motor(Ports.PORT3, GearSetting.RATIO_18_1, True)\narms_motor_b = Motor(Ports.PORT8, GearSetting.RATIO_18_1, False)\narms = MotorGroup(arms_motor_a, arms_motor_b)\nfront_clamp = Motor(Ports.PORT14, GearSetting.RATIO_18_1, False)\nback_clamp = Motor(Ports.PORT20, GearSetting.RATIO_18_1, True)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    drivetrain_inertial.calibrate()\n    while drivetrain_inertial.is_calibrating():\n        sleep(25, MSEC)\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n# define variables used for controlling motors based on controller inputs\ndrivetrain_needs_to_be_stopped_controller_1 = False\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global drivetrain_needs_to_be_stopped_controller_1, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axis3 + axis4\n            # right = axis3 - axis4\n            drivetrain_left_side_speed = controller_1.axis3.position() + controller_1.axis4.position()\n            drivetrain_right_side_speed = controller_1.axis3.position() - controller_1.axis4.position()\n            \n            # check if the values are inside of the deadband range\n            if abs(drivetrain_left_side_speed) < 5 and abs(drivetrain_right_side_speed) < 5:\n                # check if the motors have already been stopped\n                if drivetrain_needs_to_be_stopped_controller_1:\n                    # stop the drive motors\n                    left_drive_smart.stop()\n                    right_drive_smart.stop()\n                    # tell the code that the motors have been stopped\n                    drivetrain_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the motors next\n                # time the input is in the deadband range\n                drivetrain_needs_to_be_stopped_controller_1 = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_needs_to_be_stopped_controller_1:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_needs_to_be_stopped_controller_1:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n\n\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\n\nclass BlamBot():\n    def __init__(self):\n        print('Starting...')\n\n        self.Competition = Competition(self.StartDriverControlled, self.StartProgrammingSkills)\n        self.FrontClampEnabled = False\n        \n        drivetrain.set_stopping(COAST)\n\n        arms.set_max_torque(100, PERCENT)\n        arms.set_stopping(BRAKE)\n\n        front_clamp.set_velocity(50, PERCENT)\n        front_clamp.set_max_torque(50, PERCENT)\n        front_clamp.set_stopping(BRAKE)\n        front_clamp.set_position(0, DEGREES)\n        self.MoveFrontClamp(willEnable=False)\n\n        back_clamp.set_velocity(50, PERCENT)\n        back_clamp.set_max_torque(50, PERCENT)\n        self.MoveBackClamp(willEnable=False)\n\n        calibrate_drivetrain()\n\n        print('Ready')\n\n        while True:\n            self.UpdateBrain()\n            wait(1, SECONDS)\n\n    def MoveArms(self):\n        velocity = controller_1.axis2.position()\n        arms.set_velocity(velocity, PERCENT)\n        arms.spin(FORWARD)\n\n    def MoveFrontClamp(self, willEnable=None, delay=0):\n        if willEnable is True:\n            self.FrontClampEnabled = True\n        elif willEnable is False:\n            self.FrontClampEnabled = False\n        else:\n            self.FrontClampEnabled = not self.FrontClampEnabled\n\n        if self.FrontClampEnabled:\n            front_clamp.spin_to_position(-360, DEGREES, wait=False)\n        else:\n            front_clamp.spin_to_position(-180, DEGREES, wait=False)\n\n        wait(delay, SECONDS)\n\n    def MoveBackClamp(self, willEnable=None, delay=0):\n        if willEnable is True:\n            self.BackClampEnabled = True\n        elif willEnable is False:\n            self.BackClampEnabled = False\n        else:\n            self.BackClampEnabled = not self.BackClampEnabled\n\n        if self.BackClampEnabled:\n            self.BackClampEnabled = True\n            back_clamp.set_stopping(HOLD)\n            back_clamp.spin(FORWARD)\n            wait(0.5, SECONDS)\n            back_clamp.stop()\n        else:\n            self.BackClampEnabled = False\n            back_clamp.set_stopping(COAST)\n            back_clamp.spin(REVERSE)\n            wait(0.5, SECONDS)\n            back_clamp.stop()\n\n        wait(delay, SECONDS)\n\n    def DriveFor(self, direction, distance, timeout):\n        drivetrain.set_timeout(timeout, SECONDS)\n        drivetrain.drive_for(direction, distance, INCHES, wait=True)\n\n    def StartDriverControlled(self):\n        print('Starting driver controlled...')\n\n        drivetrain.set_drive_velocity(100, PERCENT)\n        drivetrain.set_turn_velocity(100, PERCENT)\n\n        controller_1.axis2.changed(self.MoveArms)\n        controller_1.buttonR1.pressed(self.MoveFrontClamp)\n        controller_1.buttonL1.pressed(self.MoveBackClamp)\n\n    def _ProgrammingRightBlue(self):\n        print(brain.timer.time(SECONDS)) ##########\n        self.DriveFor(FORWARD, 16, 3)\n        print(brain.timer.time(SECONDS)) ##########\n        self.MoveFrontClamp(willEnable=True, delay=1)\n        print(brain.timer.time(SECONDS)) ##########\n        arms.spin_to_position(600, DEGREES, wait=False)\n        print(brain.timer.time(SECONDS)) ##########\n        self.DriveFor(FORWARD, 130, 12)\n        print(brain.timer.time(SECONDS)) ##########\n        self.DriveFor(REVERSE, 24, 3)\n        print(brain.timer.time(SECONDS)) ##########\n        drivetrain.turn_to_heading(0, DEGREES, wait=True)\n        print(brain.timer.time(SECONDS)) ##########\n        self.DriveFor(REVERSE, 12, 3)\n        print(brain.timer.time(SECONDS)) ##########\n\n    def StartProgrammingSkills(self):\n        print('Starting programming skills...')\n\n        drivetrain.set_drive_velocity(50, PERCENT)\n        drivetrain.set_turn_velocity(50, PERCENT)\n        drivetrain.set_heading(90, DEGREES)\n        front_clamp.set_position(-180, DEGREES)\n\n        self._ProgrammingRightBlue()\n\n    def UpdateBrain(self):\n        brain.screen.clear_screen()\n        brain.screen.set_cursor(1, 0)\n\n        battery_capacity = round(brain.battery.capacity())\n        brain.screen.set_pen_color(battery_capacity < 20 and Color.RED or battery_capacity < 50 and Color.YELLOW or Color.GREEN)\n        brain.screen.print('Battery: {} Percent'.format(battery_capacity)) \n        brain.screen.next_row()\n\n        drivetrain_temperature = round(drivetrain.temperature(PERCENT))\n        brain.screen.set_pen_color(drivetrain_temperature > 70 and Color.RED or drivetrain_temperature >= 50 and Color.YELLOW or Color.GREEN)\n        brain.screen.print('Drivetrain Temperature: {} Percent'.format(drivetrain_temperature)) \n        brain.screen.next_row()\n\n        arms_temperature = round(arms.temperature(PERCENT))\n        brain.screen.set_pen_color(arms_temperature > 70 and Color.RED or arms_temperature >= 50 and Color.YELLOW or Color.GREEN)\n        brain.screen.print('Arms Temperature: {} Percent'.format(arms_temperature)) \n        brain.screen.next_row()\n\n        front_clamp_temperature = round(front_clamp.temperature(PERCENT))\n        brain.screen.set_pen_color(front_clamp_temperature > 70 and Color.RED or front_clamp_temperature >= 50 and Color.YELLOW or Color.GREEN)\n        brain.screen.print('Front Clamp Temperature: {} Percent'.format(front_clamp_temperature)) \n        brain.screen.next_row()\n\n        back_clamp_temperature = round(back_clamp.temperature(PERCENT))\n        brain.screen.set_pen_color(back_clamp_temperature > 70 and Color.RED or back_clamp_temperature >= 50 and Color.YELLOW or Color.GREEN)\n        brain.screen.print('Back Clamp Temperature: {} Percent'.format(back_clamp_temperature)) \n        brain.screen.next_row()\n        \ndef __main__():\n    BlamBot()\n\nif __name__ == '__main__':\n    __main__()\n","textLanguage":"python","rconfig":[{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"arcadel","id":"primary"},"triportSourcePort":22},{"port":[1,2,9,10,4],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"inertial","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[3,8],"name":"arms","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"true","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[14],"name":"front_clamp","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[20],"name":"back_clamp","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22}],"slot":2,"platform":"V5","sdkVersion":"20211210.18.00.00","appVersion":"2.3.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}