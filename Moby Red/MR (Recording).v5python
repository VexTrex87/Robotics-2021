{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\nwheel_left = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nwheel_right = Motor(Ports.PORT10, GearSetting.RATIO_18_1, True)\narm_left = Motor(Ports.PORT9, GearSetting.RATIO_18_1, False)\narm_right = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n#endregion VEXcode Generated Robot Configuration\n\nUPDATE_DELAY = 0.25\nRECORDING = [{'wheels': (0.0, -0.0)}, {'wheels': (0.0, -0.0)}, {'wheels': (0.0, -0.0)}, {'wheels': (0.0, -0.0)}, {'wheels': (0.0, 2.7)}, {'wheels': (32.96667, 33.63333)}, {'wheels': (24.73333, 26.2)}, {'wheels': (18.73333, 20.53333)}, {'wheels': (24.2, 24.56667)}, {'wheels': (24.46667, 22.63333)}, {'wheels': (24.16667, 24.86667)}, {'wheels': (24.5, 24.73333)}, {'wheels': (24.7, 25.6)}, {'wheels': (5.3, 18.43333)}, {'wheels': (5.5, -0.0)}, {'wheels': (0.0, -0.0)}, {'wheels': (0.0, -0.0)}, {'wheels': (0.0, -0.0)}, {'wheels': (-2.833333, -9.366667)}, {'wheels': (-16.86667, -16.03333)}, {'wheels': (-22.76667, -22.4)}, {'wheels': (-17.36667, -18.23333)}, {'wheels': (-19.26667, -18.16667)}, {'wheels': (-20.3, -20.1)}, {'wheels': (-18.73333, -19.13333)}, {'wheels': (-20.9, -19.93333)}, {'wheels': (-20.1, -18.83333)}, {'wheels': (-19.73333, -19.36667)}, {'wheels': (-19.36667, -17.96667)}, {'wheels': (-19.76667, -21.63333)}, {'wheels': (-33.46667, -11.7)}, {'wheels': (-16.96667, -18.13333)}, {'wheels': (0.0, -0.0)}, {'wheels': (0.0, -0.0)}]\n\ndef move_arms(power_total=None):\n    if not power_total:\n        power_total = controller_1.axis2.position()\n\n    if power_total == 0:\n        arm_left.stop()\n        arm_right.stop()\n    else:\n        arm_left.spin(FORWARD)\n        arm_right.spin(FORWARD)\n\n    arm_left.set_velocity(power_total, PERCENT)\n    arm_right.set_velocity(power_total, PERCENT)\n\ndef move_wheels(power_left=None, power_right=None):\n    if not power_left or not power_right:\n        vertical_velocity = controller_1.axis3.position()\n        horizontal_velocity = controller_1.axis4.position()\n        power_left = vertical_velocity + horizontal_velocity\n        power_right = vertical_velocity - horizontal_velocity\n\n    if power_left == 0 and power_right == 0:\n        wheel_left.stop()\n        wheel_right.stop()\n    else:\n        wheel_left.spin(FORWARD)\n        wheel_right.spin(FORWARD)\n\n    wheel_left.set_velocity(power_left, PERCENT)\n    wheel_right.set_velocity(power_right, PERCENT)\n\ndef start_recording():\n    print('Recording...')\n\n    global steps\n    steps = []\n    \n    global is_recording\n    is_recording = True\n\n    while True:\n        if not is_recording:\n            break\n            \n        wheel_left_power = wheel_left.velocity(PERCENT)\n        wheel_right_power = wheel_right.velocity(PERCENT)\n        step = {\n            'wheels': (wheel_left_power, wheel_right_power)\n        }\n\n        steps.append(step)\n        wait(UPDATE_DELAY, SECONDS)\n        \ndef stop_recording():\n    global is_recording\n    is_recording = False\n    print(steps)\n\ndef play_steps():\n    print('Playing Steps...')\n\n    global is_playing\n    is_playing = True\n\n    wheel_left.spin(FORWARD)\n    wheel_right.spin(FORWARD)\n\n    for step in RECORDING:\n        print(is_playing)\n        if not is_playing:\n            break\n\n        wheel_left_power = step['wheels'][0]\n        wheel_right_power = step['wheels'][1]\n        wheel_left.set_velocity(wheel_left_power, PERCENT)\n        wheel_right.set_velocity(wheel_right_power, PERCENT)\n\n        wait(UPDATE_DELAY, SECONDS)\n\n    print('Finished Steps')\n\ndef stop_steps():\n    print('Stopping Steps...')\n\n    global is_playing\n    is_playing = False\n\n    wheel_left.set_velocity(0, PERCENT)\n    wheel_right.set_velocity(0, PERCENT)\n    wheel_left.stop()\n    wheel_right.stop()\n\ndef start_auto_period():\n    print('Autonomous Period Started')\n    play_recording(RECORDING)\n\ndef start_manual_period():\n    print('Driver Control Period Started')\n\n    controller_1.axis3.changed(move_wheels)\n    controller_1.axis4.changed(move_wheels)\n    controller_1.axis2.changed(move_arms)\n\n    controller_1.buttonUp.pressed(start_recording)\n    controller_1.buttonDown.pressed(stop_recording)\n    controller_1.buttonRight.pressed(play_steps)\n    controller_1.buttonLeft.pressed(stop_steps)\n\ndef __main__():\n    print('Running')\n    Competition(start_manual_period, start_auto_period)\n\nif __name__ == '__main__':\n    __main__()\n","textLanguage":"python","rconfig":[{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[1],"name":"wheel_left","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[10],"name":"wheel_right","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[9],"name":"arm_left","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[2],"name":"arm_right","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22}],"slot":1,"platform":"V5","sdkVersion":"20211013.15.00.00","appVersion":"2.2.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}