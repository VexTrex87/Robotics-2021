{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nleft_drive_smart = Motor(Ports.PORT9, GearSetting.RATIO_18_1, False)\nright_drive_smart = Motor(Ports.PORT19, GearSetting.RATIO_18_1, True)\ndrivetrain_inertial = Inertial(Ports.PORT16)\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, drivetrain_inertial, 319.19, 320, 292.09999999999997, MM, 1)\ncontroller_1 = Controller(PRIMARY)\narms_motor_a = Motor(Ports.PORT10, GearSetting.RATIO_18_1, False)\narms_motor_b = Motor(Ports.PORT20, GearSetting.RATIO_18_1, True)\narms = MotorGroup(arms_motor_a, arms_motor_b)\narm_potentiometer = PotentiometerV2(brain.three_wire_port.a)\nrange_finder = Sonar(brain.three_wire_port.c)\n# vex-vision-config:begin\nvision_sensor = Vision(Ports.PORT17, 50)\n# vex-vision-config:end\ngps_sensor = Gps(Ports.PORT7, -50.80, 152.40, MM, 0)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    drivetrain_inertial.calibrate()\n    while drivetrain_inertial.is_calibrating():\n        sleep(25, MSEC)\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n\n\n# define variables used for controlling motors based on controller inputs\ndrivetrain_needs_to_be_stopped_controller_1 = False\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global drivetrain_needs_to_be_stopped_controller_1, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axis3 + axis4\n            # right = axis3 - axis4\n            drivetrain_left_side_speed = controller_1.axis3.position() + controller_1.axis4.position()\n            drivetrain_right_side_speed = controller_1.axis3.position() - controller_1.axis4.position()\n            \n            # check if the values are inside of the deadband range\n            if abs(drivetrain_left_side_speed) < 5 and abs(drivetrain_right_side_speed) < 5:\n                # check if the motors have already been stopped\n                if drivetrain_needs_to_be_stopped_controller_1:\n                    # stop the drive motors\n                    left_drive_smart.stop()\n                    right_drive_smart.stop()\n                    # tell the code that the motors have been stopped\n                    drivetrain_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the motors next\n                # time the input is in the deadband range\n                drivetrain_needs_to_be_stopped_controller_1 = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_needs_to_be_stopped_controller_1:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_needs_to_be_stopped_controller_1:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\ndef move_arms():\n    arm_power = controller_1.axis2.position()\n\n    # Stop arms if they are over-extending and the driver wants to continue over-extending\n    if arm_power == 0 or (arm_potentiometer.angle >= 90 and arm_power > 0):\n        arms.stop()\n    else:\n        arms.spin(FORWARD)\n        arms.set_velocity(arm_power, PERCENT)\n\ndef start_driver_control_period():\n    print('Driver control period started')\n    controller_1.axis2.changed(move_arms)\n\ndef start_autonomous_period():\n    print('Autonomous period started')\n\n    # Repeat scoring points until autonomous period is over\n    while True:\n        # Find an object\n        vision_object = vision_sensor.take_snapshot(SIGNATURE)\n        if vision_object:\n            closest_object = vision_sensor.largest_object()\n            if closest_object and closest_object.exists:\n                # Go to object\n                while closest_object.exists:\n                    # Turn to object\n                    object_angle = closest_object.angle\n                    if abs(object_angle - drivetrain.rotation(DEGREES)) > 5 and not range_finder.found_object():\n                        object_angle = closest_object.angle()\n                        drivetrain.turn_to_rotation(object_angle, DEGREES)\n\n                    # Drive towards object\n                    object_position = range_finder.distance(INCHES)\n                    if object_position > 10:\n                        drivetrain.drive_for(FORWARD, object_position, INCHES)\n\n                    # If the object is within range to be picked up, pick it up\n                    object_position = range_finder.distance(INCHES)\n                    if object_position < 10:\n                        break\n\n                    # Prevent exhausting the code\n                    wait(0.1, SECONDS)\n\n                # Pickup mobile goal\n                arms.spin_for(FORWARD, 20, DEGREES)\n\n                # Go to alliance region\n                drivetrain.turn_to_heading(180, DEGREES)\n                distance_from_alliance_region = gps_sensor.y_position() - 24\n                if distance_from_alliance > 0:\n                    drivetrain.drive_for(FORWARD, distance_from_alliance_region, INCHES)\n\n                # Drop mobile goal\n                arms.spin_for(FORWARD, -20, DEGREES)\n                drivetrain.drive_for(REVERSE, 10, INCHES)\n                drivetrain.turn_to_heading(0, DEGREES)\n\n        # Prevent exhausting the code\n        wait(0.1, SECONDS)\n\ndef __main__():\n    print('Ready')\n\n    calibrate_drivetrain()\n    gps_sensor.calibrate()\n    Competition(start_driver_control_period, start_autonomous_period)\n\n    # Stop arms if they are over-extending\n    while True:\n        if arm_potentiometer.angle >= 90:\n            arms.set_velocity(0, PERCENT)\n\nif __name__ == '__main__':\n    __main__()\n","textLanguage":"python","rconfig":[{"port":[9,19,16],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"inertial","width":"14.75","unit":"in","wheelbase":"11.5","wheelbaseUnit":"in","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"arcadel","id":"primary"},"triportSourcePort":22},{"port":[10,20],"name":"arms","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[1],"name":"arm_potentiometer","customName":true,"deviceType":"PotentiometerV2","deviceClass":"potV2","setting":{"id":"partner"},"triportSourcePort":22},{"port":[3,4],"name":"range_finder","customName":true,"deviceType":"RangeFinder","deviceClass":"sonar","setting":{"id":"partner"},"triportSourcePort":22},{"port":[17],"name":"vision_sensor","customName":true,"deviceType":"Vision","deviceClass":"vision","setting":{"config":"{\"config\":{\"brightness\":50,\"signatures\":[{\"name\":\"SIG_1\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_1\"},\"range\":2.5},{\"name\":\"SIG_2\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_2\"},\"range\":2.5},{\"name\":\"SIG_3\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_3\"},\"range\":2.5},{\"name\":\"SIG_4\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_4\"},\"range\":2.5},{\"name\":\"SIG_5\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_5\"},\"range\":2.5},{\"name\":\"SIG_6\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_6\"},\"range\":2.5},{\"name\":\"SIG_7\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_7\"},\"range\":2.5}],\"codes\":[]}}","isConfigured":"false","id":"partner"},"triportSourcePort":22},{"port":[7],"name":"gps_sensor","customName":true,"deviceType":"GPS","deviceClass":"gps","setting":{"xOffset":"-2","xOffsetUnit":"in","yOffset":"6","yOffsetUnit":"in","thetaOffset":"0"}}],"slot":1,"platform":"V5","sdkVersion":"20211013.15.00.00","appVersion":"2.2.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}