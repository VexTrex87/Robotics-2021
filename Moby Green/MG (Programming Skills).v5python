{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nleft_drive_smart = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nright_drive_smart = Motor(Ports.PORT11, GearSetting.RATIO_18_1, True)\ndrivetrain_gps = Gps(Ports.PORT6, 69.85, -266.70, MM, 180)\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, drivetrain_gps, 319.19, 320, 298.45, MM, 1)\ncontroller_1 = Controller(PRIMARY)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain GPS\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"GPS\")\n    drivetrain_gps.calibrate()\n    while drivetrain_gps.is_calibrating():\n        sleep(25, MSEC)\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n\n\n# define variables used for controlling motors based on controller inputs\ndrivetrain_needs_to_be_stopped_controller_1 = False\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global drivetrain_needs_to_be_stopped_controller_1, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axis3 + axis4\n            # right = axis3 - axis4\n            drivetrain_left_side_speed = controller_1.axis3.position() + controller_1.axis4.position()\n            drivetrain_right_side_speed = controller_1.axis3.position() - controller_1.axis4.position()\n            \n            # check if the values are inside of the deadband range\n            if abs(drivetrain_left_side_speed) < 5 and abs(drivetrain_right_side_speed) < 5:\n                # check if the motors have already been stopped\n                if drivetrain_needs_to_be_stopped_controller_1:\n                    # stop the drive motors\n                    left_drive_smart.stop()\n                    right_drive_smart.stop()\n                    # tell the code that the motors have been stopped\n                    drivetrain_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the motors next\n                # time the input is in the deadband range\n                drivetrain_needs_to_be_stopped_controller_1 = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_needs_to_be_stopped_controller_1:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_needs_to_be_stopped_controller_1:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\nDRIVETRAIN_ACCURACY = 10\n\nimport math\n\ndef get_distance(current_position, target_position):\n    return math.sqrt(((target_position[0] - current_position[0]) ^ 2) + ((target_position[1] - current_position[1]) ^ 2))\n\nclass MobyGreen():\n    def __init__(self):\n        self.Competition = Competition(self.StartProgramming, self.StartProgramming)\n        while True:\n            self.UpdateBrain()\n            wait(1, SECONDS)\n\n    def GetPosition(self):\n        x_position = round(drivetrain_gps.x_position(MM))\n        y_position = round(drivetrain_gps.y_position(MM))\n        heading = round(drivetrain_gps.heading())      \n        return (x_position, y_position, heading)\n\n    def DriveTo(self, action, value):\n        if action == 'heading':\n            print('Turning to heading ' + str(value))\n            drivetrain.turn_to_heading(value, DEGREES)\n        elif action == 'x_position':\n            print('Driving to x-position ' + str(value))\n            drivetrain.drive(FORWARD)\n            while True:\n                current_position = self.GetPosition()\n                distance_from_target = abs(current_position[0] - value)\n                if distance_from_target < DRIVETRAIN_ACCURACY:\n                    drivetrain.stop()\n                    break\n        elif action == 'y_position':\n            print('Driving to y-position ' + str(value))\n            drivetrain.drive(FORWARD)\n            while True:\n                current_position = self.GetPosition()\n                distance_from_target = abs(current_position[1] - value)\n                if distance_from_target < DRIVETRAIN_ACCURACY:\n                    drivetrain.stop()\n                    break\n\n    def UpdateBrain(self):\n        controller_1.screen.clear_row(3)\n        controller_1.screen.set_cursor(3, 1)\n        controller_1.screen.print(str(self.GetPosition()))\n\n        brain.screen.set_font(FontType.MONO20)\n\n        time_elapsed = round(brain.timer.time(SECONDS))\n        brain.screen.clear_screen()\n        brain.screen.set_cursor(1, 0)\n        brain.screen.print('Time Elapsed: {} Seconds'.format(time_elapsed))  \n\n        battery_capacity = round(brain.battery.capacity())\n        if battery_capacity < 20:\n            brain.screen.set_pen_color(Color.RED)\n        elif battery_capacity < 50:\n            brain.screen.set_pen_color(Color.YELLOW)\n        else:\n            brain.screen.set_pen_color(Color.GREEN)\n\n        brain.screen.next_row()\n        brain.screen.print('Battery: {} Percent'.format(battery_capacity)) \n        brain.screen.set_pen_color(Color.WHITE) \n\n        drivetrain_velocity = round(drivetrain.velocity(PERCENT))\n        brain.screen.next_row()\n        brain.screen.print('Drivetrain Velocity: {} Percent'.format(drivetrain_velocity))\n        \n        drivetrain_efficiency = round(drivetrain.efficiency(PERCENT))\n        brain.screen.next_row()\n        brain.screen.print('Drivetrain Efficiency: {} Percent'.format(drivetrain_efficiency))\n\n        drivetrain_temperature = round(drivetrain.temperature(PERCENT))\n        if drivetrain_temperature > 70:\n            brain.screen.set_pen_color(Color.RED)\n        elif drivetrain_temperature > 50:\n            brain.screen.set_pen_color(Color.YELLOW)\n        else:\n            brain.screen.set_pen_color(Color.GREEN)\n\n        brain.screen.next_row()\n        brain.screen.print('Drivetrain Temperature: {} Percent'.format(drivetrain_temperature))\n        brain.screen.set_pen_color(Color.WHITE)\n\n        brain.screen.next_row()\n        brain.screen.set_font(FontType.MONO60)\n        brain.screen.print('Orion (136063B)')\n\n    def StartDriverControl(self):\n        print('Starting Driver Control...')\n\n    def StartProgramming(self):\n        print('Starting Programming...')\n\n        drivetrain.set_drive_velocity(25, PERCENT)\n        drivetrain.set_turn_velocity(25, PERCENT)\n        calibrate_drivetrain()\n\n        DIRECTIONS = {\n            'heading': 90,\n            'x_position': -600,\n\n            'heading': 180,\n            'y_position': -600,\n\n            'heading': 90,\n            'x_position': 1200,\n\n            'heading': 0,\n            'y_position': 1200,\n\n            'heading': 270,\n            'x_position': -1500,\n\n            'heading': 90,\n            'x_position': -1200,\n        }\n\n        for action, value in DIRECTIONS.items():\n            self.DriveTo(action, value)\n\n        print('Finished Programming...')\n\ndef __main__():\n    print('Starting...')\n    moby_green = MobyGreen()\n    print('Ready...')\n\nif __name__ == '__main__':\n    __main__()\n","textLanguage":"python","rconfig":[{"port":[1,11,6],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"gps","width":"14.75","unit":"in","wheelbase":"11.75","wheelbaseUnit":"in","xOffset":"2.75","xOffsetUnit":"in","yOffset":"-10.5","yOffsetUnit":"in","thetaOffset":"180"},"triportSourcePort":null},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"arcadel","id":"primary"},"triportSourcePort":22}],"slot":1,"platform":"V5","sdkVersion":"20211013.15.00.00","appVersion":"2.2.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}