{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nleft_drive_smart = Motor(Ports.PORT9, GearSetting.RATIO_18_1, False)\nright_drive_smart = Motor(Ports.PORT19, GearSetting.RATIO_18_1, True)\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 319.19, 374.65, 298.45, MM, 1)\ncontroller_1 = Controller(PRIMARY)\narms_motor_a = Motor(Ports.PORT10, GearSetting.RATIO_18_1, False)\narms_motor_b = Motor(Ports.PORT20, GearSetting.RATIO_18_1, True)\narms = MotorGroup(arms_motor_a, arms_motor_b)\n# vex-vision-config:begin\nvision_sensor__NEUTRAL_MOBILE_GOAL = Signature(1, 399, 2033, 1216,-2943, -381, -1662,0.8, 0)\nvision_sensor__RED_MOBILE_GOAL = Signature(2, 0, 0, 0,0, 0, 0,3, 0)\nvision_sensor__SIG_3 = Signature(3, 0, 0, 0,0, 0, 0,3, 0)\nvision_sensor__SIG_4 = Signature(4, 0, 0, 0,0, 0, 0,3, 0)\nvision_sensor__SIG_5 = Signature(5, 0, 0, 0,0, 0, 0,3, 0)\nvision_sensor__SIG_6 = Signature(6, 0, 0, 0,0, 0, 0,3, 0)\nvision_sensor__SIG_7 = Signature(7, 0, 0, 0,0, 0, 0,3, 0)\nvision_sensor = Vision(Ports.PORT16, 44, vision_sensor__NEUTRAL_MOBILE_GOAL, vision_sensor__RED_MOBILE_GOAL, vision_sensor__SIG_3, vision_sensor__SIG_4, vision_sensor__SIG_5, vision_sensor__SIG_6, vision_sensor__SIG_7)\n# vex-vision-config:end\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n\n# define variables used for controlling motors based on controller inputs\ndrivetrain_needs_to_be_stopped_controller_1 = False\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global drivetrain_needs_to_be_stopped_controller_1, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axis3 + axis4\n            # right = axis3 - axis4\n            drivetrain_left_side_speed = controller_1.axis3.position() + controller_1.axis4.position()\n            drivetrain_right_side_speed = controller_1.axis3.position() - controller_1.axis4.position()\n            \n            # check if the values are inside of the deadband range\n            if abs(drivetrain_left_side_speed) < 5 and abs(drivetrain_right_side_speed) < 5:\n                # check if the motors have already been stopped\n                if drivetrain_needs_to_be_stopped_controller_1:\n                    # stop the drive motors\n                    left_drive_smart.stop()\n                    right_drive_smart.stop()\n                    # tell the code that the motors have been stopped\n                    drivetrain_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the motors next\n                # time the input is in the deadband range\n                drivetrain_needs_to_be_stopped_controller_1 = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_needs_to_be_stopped_controller_1:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_needs_to_be_stopped_controller_1:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\ndef move_arms():\n    arm_power = controller_1.axis2.position()\n    arms.spin(FORWARD)\n    arms.set_velocity(arm_power, PERCENT)\n\ndef locate_mobile_goal(signature):\n    snapshot = vision_sensor.take_snapshot(signature)\n    if snapshot:\n        mobile_goal = vision_sensor.largest_object()\n        if mobile_goal and mobile_goal.exists:\n            return mobile_goal\n        else:\n            return None\n    else:\n        return None\n\ndef start_driver_control_period():\n    print('Driver control period started')\n    controller_1.axis2.changed(move_arms)\n\ndef start_autonomous_period():\n    print('Autonomous period started')\n\n    # Initiate vision sensor\n    recent_direction = RIGHT\n    drivetrain.set_turn_velocity(40, PERCENT)\n    drivetrain.set_drive_velocity(40, PERCENT)\n    drivetrain.set_stopping(COAST)\n    wait(0.5, SECONDS)\n\n    # Continuously look & drive to mobile goals\n    while True:\n        # Locate mobile goal\n        red_mobile_goal = locate_mobile_goal(vision_sensor__RED_MOBILE_GOAL)\n        if red_mobile_goal:\n            # Turn towards mobile goal\n            if red_mobile_goal.centerX > 200:\n                drivetrain.turn(RIGHT)\n                recent_direction = RIGHT\n            elif red_mobile_goal.centerX < 100:\n                drivetrain.turn(LEFT)\n                recent_direction = LEFT\n            else:\n                # Drive towards mobile goal\n                if red_mobile_goal.width < 150:\n                    drivetrain.drive(FORWARD)\n                else:\n                    drivetrain.stop()\n        else:\n            drivetrain.turn(recent_direction)\n        wait(0.1, SECONDS)\n\ndef __main__():\n    print('Ready')\n    Competition(start_driver_control_period, start_autonomous_period)\n\nif __name__ == '__main__':\n    __main__()\n","textLanguage":"python","rconfig":[{"port":[9,19,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"14.75","unit":"in","wheelbase":"11.75","wheelbaseUnit":"in","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"arcadel","id":"primary"},"triportSourcePort":22},{"port":[10,20],"name":"arms","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[16],"name":"vision_sensor","customName":true,"deviceType":"Vision","deviceClass":"vision","setting":{"config":"{\"config\":{\"brightness\":44,\"signatures\":[{\"name\":\"NEUTRAL_MOBILE_GOAL\",\"parameters\":{\"uMin\":399,\"uMax\":2033,\"uMean\":1216,\"vMin\":-2943,\"vMax\":-381,\"vMean\":-1662,\"rgb\":11574658.205357144,\"type\":0,\"name\":\"NEUTRAL_MOBILE_GOAL\"},\"range\":0.8},{\"name\":\"RED_MOBILE_GOAL\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"RED_MOBILE_GOAL\"},\"range\":3},{\"name\":\"SIG_3\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_3\"},\"range\":3},{\"name\":\"SIG_4\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_4\"},\"range\":3},{\"name\":\"SIG_5\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_5\"},\"range\":3},{\"name\":\"SIG_6\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_6\"},\"range\":3},{\"name\":\"SIG_7\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_7\"},\"range\":3}],\"codes\":[]}}","isConfigured":"false"},"triportSourcePort":22}],"slot":2,"platform":"V5","sdkVersion":"20211013.15.00.00","appVersion":"2.2.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}